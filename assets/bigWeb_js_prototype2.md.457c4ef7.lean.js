import{_ as s,v as o,b as n,R as a}from"./chunks/framework.8a901faa.js";const l="/assets/prototype.47e784d7.png",p="/assets/prototype2.8f89c207.png",_=JSON.parse('{"title":"javascript - 为什么实例没有prototype属性？什么时候对象会有prototype属性呢？","description":"","frontmatter":{"sidebar":{"title":"javascript - 为什么实例没有prototype属性？什么时候对象会有prototype属性呢？","step":10},"isTimeLine":true,"title":"javascript - 为什么实例没有prototype属性？什么时候对象会有prototype属性呢？","date":"2020-07-12T00:00:00.000Z","author":"马凯","tags":["前端","JavaScript"],"categories":["前端"]},"headers":[],"relativePath":"bigWeb/js/prototype2.md","filePath":"bigWeb/js/prototype2.md","lastUpdated":1697782136000}'),t={name:"bigWeb/js/prototype2.md"},e=a(`<h1 id="javascript-为什么实例没有prototype属性-什么时候对象会有prototype属性呢" tabindex="-1">javascript - 为什么实例没有prototype属性？什么时候对象会有prototype属性呢？ <a class="header-anchor" href="#javascript-为什么实例没有prototype属性-什么时候对象会有prototype属性呢" aria-label="Permalink to &quot;javascript - 为什么实例没有prototype属性？什么时候对象会有prototype属性呢？&quot;">​</a></h1><h2 id="代码示例" tabindex="-1">代码示例 <a class="header-anchor" href="#代码示例" aria-label="Permalink to &quot;代码示例&quot;">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Foo</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> test </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Foo</span><span style="color:#BABED8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#FFCB6B;">test</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype) </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(test</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">__proto__ </span><span style="color:#89DDFF;">===</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Foo</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype) </span><span style="color:#676E95;font-style:italic;">// true</span></span></code></pre></div><h2 id="解答" tabindex="-1">解答 <a class="header-anchor" href="#解答" aria-label="Permalink to &quot;解答&quot;">​</a></h2><p>只有构造函数才有prototype属性，通常我们自定义的函数都属于构造函数，所以默认都有此属性。</p><p>JS运行时环境内置的函数有些不是构造函数，比如alert和Math.sqrt等，就没有此属性。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(window</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">alert</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype) </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(Math</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">ceil</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype) </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(Math</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">random</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype) </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(window</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">alert</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">__proto__) </span><span style="color:#676E95;font-style:italic;">// 指向内置匿名函数anonymous</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(Math</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">ceil</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">__proto__) </span><span style="color:#676E95;font-style:italic;">// 指向内置匿名函数anonymous</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(Math</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">random</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">__proto__) </span><span style="color:#676E95;font-style:italic;">// 指向内置匿名函数anonymous</span></span></code></pre></div><p>返回结果图示 <img src="`+l+`" alt="返回结果图示"></p><p><strong>注：构造函数是指有一个内部属性[[Constructor]]，通过new可以创建对象的那些函数。</strong></p><p><strong>根据文档开始代码示例进行分析</strong></p><ul><li><ol><li>test是Foo的一个实例，他并不是一个函数，所以没有prototype；Foo是Function的一个实例，但是Function是一个函数，他的实例返回的也是一个函数，所以他们都有prototype。除此之外在内置对象中，Array、Object、RegExp、Date等都是函数，不过他们在实例化之后返回的是对象，Math/Proxy就仅仅是一个new Object(),不是函数。</li></ol></li></ul><p>验证一下</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 本身是构造函数</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype) </span><span style="color:#676E95;font-style:italic;">// Object{...}</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype) </span><span style="color:#676E95;font-style:italic;">// Array[]</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#FFCB6B;">RegExp</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype) </span><span style="color:#676E95;font-style:italic;">// RegExp.prototype{flags: &quot;&quot;, source: &quot;(?:)&quot;, ...}</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#FFCB6B;">Date</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype) </span><span style="color:#676E95;font-style:italic;">// Date.prototype{...}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Array、Object、RegExp、Date在实例化后变成实例</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{}</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// eslint-disable-next-line unicorn/no-new-array</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Array</span><span style="color:#BABED8;">([])</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> reg </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">RegExp</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">g</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> date </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#BABED8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#FFCB6B;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype) </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#FFCB6B;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype) </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#FFCB6B;">reg</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype) </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#FFCB6B;">date</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype) </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 但他们都有__proto__属性用于连接构造函数原型</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(obj</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">__proto__) </span><span style="color:#676E95;font-style:italic;">// Object{...}</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(arr</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">__proto__) </span><span style="color:#676E95;font-style:italic;">// Array[]</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(reg</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">__proto__) </span><span style="color:#676E95;font-style:italic;">// RegExp.prototype{flags: &quot;&quot;, source: &quot;(?:)&quot;, ...}</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(date</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">__proto__) </span><span style="color:#676E95;font-style:italic;">// Date.prototype{...}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Math/Proxy本身就是实例， 不存在prototype，仅有__proto__</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#FFCB6B;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype) </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#FFCB6B;">Proxy</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype) </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(Math</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">__proto__) </span><span style="color:#676E95;font-style:italic;">// Object{...} 原型链指向Object</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(Proxy</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">__proto__) </span><span style="color:#676E95;font-style:italic;">// 指向内置匿名函数anonymous， function（）</span></span></code></pre></div><p>返回结果图示 <img src="`+p+'" alt="返回结果图示"></p><ul><li><ol start="2"><li>构造函数的prototype，默认情况下本身就是一个new Object，额外添加一个属性constructor。</li></ol></li></ul><blockquote><p>所以说构造函数本身是没有prototype的，它的prototype继承自Object.prototype,默认只有__proto__。<br> 除了Object.prototype这个对象（主要是Object.prototype.<strong>proto__指向的原型链顶层null），其他的所有对象都有__proto</strong>,之后函数才有prototype属性。<br> 在创建对象的时候会自动创建一个__proto__属性，指向它构造函数的prototype,当访问这个对象的属性的时候会顺带访问__proto__中对应的属性，也就是构造函数prototype这样实现了继承。<br> 只有创建函数的时候才会创建一个prototype属性，目的就是为了完成上面的继承方式。</p></blockquote><ul><li><ol start="3"><li>proxy是一个用于构造动态代理对象，一个动态代理对象的所有属性都来自target对象或者Handler的处理结果，因此动态代理对象不需要原型，故而构造器也不需要原型对象prototype属性来提供原型。</li></ol></li></ul><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://www.php.cn/wenda/28026.html" target="_blank" rel="noreferrer"> javascript - 为什么实例没有prototype属性？什么时候对象会有prototype属性呢？</a></li></ul>',19),r=[e];function c(y,D,F,B,i,A){return o(),n("div",null,r)}const d=s(t,[["render",c]]);export{_ as __pageData,d as default};
