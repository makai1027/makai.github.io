import{_ as n,v as s,b as e,C as l,O as o,a6 as d,F as t,L as a,R as i,M as p,G as c}from"./chunks/framework.b66408a1.js";const h="/assets/bom2.f48f84aa.jpeg",b="/assets/bom3.78abf35b.png",m="/assets/bom4.25d9468c.png",g="/assets/bom5.2be5fbf5.png",q=JSON.parse('{"title":"BOM是什么？常见的BOM对象有哪些？","description":"","frontmatter":{"siderbar":{"title":"BOM是什么？常见的BOM对象有哪些？"},"isTimeLine":true,"title":"BOM是什么？常见的BOM对象有哪些？","date":"2020-06-15T09:40:00.000Z","author":"马凯","tags":["前端","JavaScript"],"categories":["前端"]},"headers":[],"relativePath":"bigWeb/js/bom.md","filePath":"bigWeb/js/bom.md","lastUpdated":1692782642000}'),y={name:"bigWeb/js/bom.md"},u=t("h1",{id:"bom是什么-常见的bom对象有哪些",tabindex:"-1"},[a("BOM是什么？常见的BOM对象有哪些？ "),t("a",{class:"header-anchor",href:"#bom是什么-常见的bom对象有哪些","aria-label":'Permalink to "BOM是什么？常见的BOM对象有哪些？"'},"​")],-1),B=t("h2",{id:"前提",tabindex:"-1"},[a("前提 "),t("a",{class:"header-anchor",href:"#前提","aria-label":'Permalink to "前提"'},"​")],-1),D=t("p",null,"在先了解BOM之前，先不充一下JavaScript整体结构。",-1),M=i('<p>从图中能够看出四个元素的关系</p><blockquote><p><strong>JavaScript包含了ECMAScript、BOM、DOM</strong>。</p></blockquote><h3 id="ecmascript" tabindex="-1">ECMAScript <a class="header-anchor" href="#ecmascript" aria-label="Permalink to &quot;ECMAScript&quot;">​</a></h3><blockquote><p><strong>ECMAScript 是一种由 ECMA国际（前身为欧洲计算机制造商协会）通过 ECMA-262 标准化的脚本程序设计语言，它是JavaScript（简称JS）的标准，浏览器就是去执行这个标准。</strong><br><strong>ECMAscript更像一个规定，规定了各个浏览器怎么样去执行JavaScript的语法</strong></p></blockquote><h3 id="dom" tabindex="-1">DOM <a class="header-anchor" href="#dom" aria-label="Permalink to &quot;DOM&quot;">​</a></h3><blockquote><p><strong>DOM（Document Object Model ，文档对象模型）一种独立于语言，用于操作xml，html文档的应用编程接口。</strong><br><strong>对于JavaScript：为了能够使JavaScript操作Html，JavaScript就有了一套自己的DOM编程接口。</strong></p></blockquote><h2 id="bom是什么" tabindex="-1">BOM是什么？ <a class="header-anchor" href="#bom是什么" aria-label="Permalink to &quot;BOM是什么？&quot;">​</a></h2><blockquote><p><strong>BOM 是 Browser Object Model，浏览器对象模型。BOM 是为了控制浏览器的行为而出现的接口。</strong><br><strong>对于JavaScript：为了能够让JavaScript能控制浏览器的行为，JavaScript就有了一套自己的BOM接口。</strong></p></blockquote><p>用户的常规交互行为例如点击页面前进、后退、刷新、浏览器窗口事件、滚动条滚动等，都属于BOM对象。</p><p>BOM浏览器模型，包含了五大模块：</p><ul><li><strong>window</strong></li><li><strong>navigator</strong></li><li><strong>location</strong></li><li><strong>screen</strong></li><li><strong>history</strong></li></ul><p><strong>BOM的梳妆结构模型</strong><img src="'+h+`" alt="BOM的梳妆结构模型"></p><h2 id="window" tabindex="-1">window <a class="header-anchor" href="#window" aria-label="Permalink to &quot;window&quot;">​</a></h2><p>在浏览器中，window对象有双重角色，即是浏览器窗口的一个接口，又是全局对象</p><p>因此所有在全局作用域中声明的变量、函数都会变成window对象的属性和方法.</p><p>例如</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// eslint-disable-next-line no-var</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> name </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">我是全局声明的</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">name</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(window</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">name) </span><span style="color:#676E95;font-style:italic;">// 我是全局声明的</span></span>
<span class="line"><span style="color:#82AAFF;">foo</span><span style="color:#BABED8;">() </span><span style="color:#676E95;font-style:italic;">// 我是全局声明的</span></span>
<span class="line"><span style="color:#BABED8;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">foo</span><span style="color:#BABED8;">() </span><span style="color:#676E95;font-style:italic;">// 我是全局声明的</span></span></code></pre></div><h3 id="window-对象的常用方法和属性" tabindex="-1">window 对象的常用方法和属性 <a class="header-anchor" href="#window-对象的常用方法和属性" aria-label="Permalink to &quot;window 对象的常用方法和属性&quot;">​</a></h3><table><thead><tr><th>名称</th><th>类型</th><th>方法</th></tr></thead><tbody><tr><td>opener</td><td>属性</td><td>获取当前窗口的父窗口, 一般用于iframe</td></tr><tr><td>open(url, name, [options])</td><td>方法</td><td>打开执行页面</td></tr><tr><td>setTimeout(fn, delay)</td><td>方法</td><td>定时器</td></tr><tr><td>setInterval(fn, delay)</td><td>方法</td><td>循环定时器</td></tr><tr><td>requestAnimationFrame(callback)</td><td>方法</td><td>利用workers实现帧动画，一般用于动画重绘</td></tr><tr><td>clearTimeout(timer)</td><td>方法</td><td>清除定时器</td></tr><tr><td>clearInterval(timer)</td><td>方法</td><td>清除循环定时器</td></tr><tr><td>close</td><td>方法</td><td>主动关闭窗口</td></tr><tr><td>alert(message)</td><td>方法</td><td>浏览器主动提示</td></tr><tr><td>confirm(message)</td><td>方法</td><td>弹出确认框</td></tr><tr><td>onhashchange</td><td>方法</td><td>用于监听浏览器hash变化</td></tr></tbody></table><h3 id="location对象的常用方法和属性" tabindex="-1">location对象的常用方法和属性 <a class="header-anchor" href="#location对象的常用方法和属性" aria-label="Permalink to &quot;location对象的常用方法和属性&quot;">​</a></h3><p>在浏览器中打印location可以看到一下信息； <img src="`+b+'" alt="location"></p><table><thead><tr><th>名称</th><th>类型</th><th>方法</th></tr></thead><tbody><tr><td>hash</td><td>属性</td><td>获取当前页面hash值，一般用于SPA页面</td></tr><tr><td>host</td><td>属性</td><td>获取当前页面的host，也就是域名</td></tr><tr><td>hostname</td><td>属性</td><td>获取当前页面的host，也就是域名</td></tr><tr><td>href</td><td>属性</td><td>获取当前窗口地址</td></tr><tr><td>origin</td><td>属性</td><td>获取当前窗口主域名</td></tr><tr><td>pathname</td><td>属性</td><td>获取窗口页面路径名称</td></tr><tr><td>protocol</td><td>属性</td><td>获取当前域名的协议</td></tr><tr><td>reload</td><td>方法</td><td>重载当前页面</td></tr><tr><td>replace(url)</td><td>方法</td><td>重定向页面</td></tr></tbody></table><h3 id="navigator对象的属性和方法" tabindex="-1">navigator对象的属性和方法 <a class="header-anchor" href="#navigator对象的属性和方法" aria-label="Permalink to &quot;navigator对象的属性和方法&quot;">​</a></h3><p>在浏览器内打印navigator可以看到一下信息； <img src="'+m+'" alt="navigator"></p><h3 id="history对象的方法和属性" tabindex="-1">history对象的方法和属性 <a class="header-anchor" href="#history对象的方法和属性" aria-label="Permalink to &quot;history对象的方法和属性&quot;">​</a></h3><p>在浏览器中打印history可以看到一下信息； <img src="'+g+'" alt="history"></p><p>常用方法以及属性如下，history对象内的属性和方法是各大框架实现router监听的途径；</p><p>history路由模式主要是利用pushState、popState、replaceState hash路由模式则是主要依靠onhashchange以及location.hash，实现hash变化监听</p><table><thead><tr><th>名称</th><th>类型</th><th>方法</th></tr></thead><tbody><tr><td>back</td><td>方法</td><td>浏览器访问记录返回上一页</td></tr><tr><td>go(delta)</td><td>方法</td><td>访问记录，向前后者向后移动多少个</td></tr><tr><td>forward()</td><td>方法</td><td>向前移动一个记录</td></tr><tr><td>pushState(state, unused, url)</td><td>方法</td><td>该方法向浏览器的会话历史栈增加了一个条目，用于页面跳转回调</td></tr><tr><td>replaceState(stateObj, title[, url]);</td><td>方法</td><td>页面重定向回调</td></tr></tbody></table><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://www.yisu.com/zixun/692555.html" target="_blank" rel="noreferrer">JavaScript中DOM与BOM的区别与用法是什么</a></li></ul>',31);function f(A,F,O,w,E,_){const r=p("Mermaid");return s(),e("div",null,[u,B,D,(s(),l(d,null,{default:o(()=>[c(r,{id:"mermaid-9",graph:"flowchart%20LR%0A%20%20%20%20start(%5BJavaScript%5D)%20--%3E%20E%5BECMAScript%5D%0A%20%20%20%20start%20--%3E%20D%5BDOM%5D%0A%20%20%20%20start%20--%3E%20B%5BBOM%5D%0A"})]),fallback:o(()=>[a(" Loading... ")]),_:1})),M])}const S=n(y,[["render",f]]);export{q as __pageData,S as default};
