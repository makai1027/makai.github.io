import{_ as e,v as a,b as t,R as o}from"./chunks/framework.3d3e5663.js";const m=JSON.parse('{"title":"JS中基本数据类型以及它们的区别","description":"JS中基本数据类型以及它们的区别","frontmatter":{"siderbar":{"title":"JS中基本数据类型以及它们的区别"},"isTimeLine":true,"title":"JS中基本数据类型以及它们的区别","head":[["meta",{"name":"keywords","content":"null,undefined,boolean,number,string,symbol,biginit,object,数据类型,基础数据类型判断"}]],"description":"JS中基本数据类型以及它们的区别","date":"2020-05-11T17:00:00.000Z","author":"马凯","aside":true,"tags":["前端","JavaScript"],"categories":["前端"]},"headers":[],"relativePath":"bigWeb/js/baseData.md","filePath":"bigWeb/js/baseData.md","lastUpdated":1714988234000}'),r={name:"bigWeb/js/baseData.md"},i=o('<h1 id="js中基本数据类型以及他们的区别" tabindex="-1">JS中基本数据类型以及他们的区别 <a class="header-anchor" href="#js中基本数据类型以及他们的区别" aria-label="Permalink to &quot;JS中基本数据类型以及他们的区别&quot;">​</a></h1><h2 id="js中数据类型" tabindex="-1">JS中数据类型 <a class="header-anchor" href="#js中数据类型" aria-label="Permalink to &quot;JS中数据类型&quot;">​</a></h2><blockquote><p>null/undefined/boolean/number/string/symbol/biginit/object</p></blockquote><p>其中symbol和bigInit是ES6新增的数据类型：</p><blockquote><p>Symbol表示创建一个独一无二的不可变的数据，主要是为了解决全局变量冲突的问题。<br> BigInit是一种数字类型的数据，它可以表示任意精度格式的整数，使用BigInit可以安全的存储和操作大整数，Number能够展示最大数为2的53次方减一</p></blockquote><h3 id="基本数据类型" tabindex="-1">基本数据类型 <a class="header-anchor" href="#基本数据类型" aria-label="Permalink to &quot;基本数据类型&quot;">​</a></h3><blockquote><p>null/undefined/boolean/number/string/symbol</p></blockquote><p>基本数据类型又称为原始数据类型，存储在栈（stack）内存中，</p><h3 id="引用数据类型" tabindex="-1">引用数据类型 <a class="header-anchor" href="#引用数据类型" aria-label="Permalink to &quot;引用数据类型&quot;">​</a></h3><blockquote><p>对象、数组、函数、原生对象（Date、Reg、map）等</p></blockquote><p>引用数据类型主要存储在堆内存中</p><h2 id="基本数据类型和引用数据类型的存储位置不同点" tabindex="-1">基本数据类型和引用数据类型的存储位置不同点 <a class="header-anchor" href="#基本数据类型和引用数据类型的存储位置不同点" aria-label="Permalink to &quot;基本数据类型和引用数据类型的存储位置不同点&quot;">​</a></h2><blockquote><p>基本数据类型直接存储在栈内存（stack）中，它们数据见得数据段，占用的空间小、大小固定、且频繁使用，所以存储在栈内存中，为了方便快速地读取，栈内存用于存储基本数据类型和引用数据类型的指针；<br>引用数据类型存储在堆内存（heap）中，特点就是占用空间大、大小不固定，如果存储在栈内存，频繁读取会影响性能，堆内存一般存储对象、函数、闭包等；<br>当解释器寻找引用数据类型的值时，会先从栈内存中取到引用数据类型的指针地址，然后从堆内存中取到对应的实体值。</p></blockquote><h3 id="堆栈的概念" tabindex="-1">堆栈的概念 <a class="header-anchor" href="#堆栈的概念" aria-label="Permalink to &quot;堆栈的概念&quot;">​</a></h3><p><strong>堆和栈的概念存在于数据结构和 操作系统内存中，在数据结构中的区别如下：</strong></p><blockquote><p>在数据结构中，栈的数据存取方式为先进后出。<br>堆是一个优先队列，按照优先级来进行排序的，优先级可以按照内存大小规定。</p></blockquote><p><strong>在操作系统中，内存被区分为栈内存和堆内存：</strong></p><blockquote><p>栈内存由编译器自动分配和释放，存放基本数据类型和引用数据类型的内存地址<br>堆内存一般存储有开发分配释放，如果不释放则程序不会被垃圾回收机制回收，例如闭包，闭包是因为父函数的词法作用域无法被销毁，一直被引用。</p></blockquote>',18),s=[i];function n(b,l,c,d,u,h){return a(),t("div",null,s)}const q=e(r,[["render",n]]);export{m as __pageData,q as default};
