import{_ as s,v as a,b as n,R as l}from"./chunks/framework.2f6b31a9.js";const A=JSON.parse('{"title":"js有哪些声明方式？他们的区别是什么？","description":"","frontmatter":{"sidebar":{"title":"js有哪些声明方式？他们的区别是什么？","step":10},"isTimeLine":true,"title":"js有哪些声明方式？他们的区别是什么？","date":"2020-10-16T00:00:00.000Z","author":"马凯","tags":["前端","JavaScript"],"categories":["前端"]},"headers":[],"relativePath":"bigWeb/js/var.md","filePath":"bigWeb/js/var.md","lastUpdated":1693471475000}'),o={name:"bigWeb/js/var.md"},p=l(`<h1 id="js有哪些声明方式-他们的区别是什么" tabindex="-1">js有哪些声明方式？他们的区别是什么？ <a class="header-anchor" href="#js有哪些声明方式-他们的区别是什么" aria-label="Permalink to &quot;js有哪些声明方式？他们的区别是什么？&quot;">​</a></h1><p>变量声明在任何语言中都会有，在JavaScript中声明方式有var、let、const、import、class、function，以下简单介绍一下他们的区别</p><h2 id="声明方式类型" tabindex="-1">声明方式类型 <a class="header-anchor" href="#声明方式类型" aria-label="Permalink to &quot;声明方式类型&quot;">​</a></h2><ul><li>var</li><li>let</li><li>const</li><li>function</li><li>class</li><li>import</li></ul><h2 id="var声明" tabindex="-1">var声明 <a class="header-anchor" href="#var声明" aria-label="Permalink to &quot;var声明&quot;">​</a></h2><p>var声明变量，可以同时初始化一个值，<strong>var的生命是一个全局作用域的生命方式，也被函数作用域限制。</strong></p><p><strong>特点</strong></p><ol><li>会造成声明提前</li><li>全局作用域</li><li>可以重复声明</li><li>容易造成变量污染</li></ol><p><strong>简单声明示例</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// var a</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// var b = 1, c = 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// var d = 10</span></span></code></pre></div><p><strong>全局作用域示例</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// eslint-disable-next-line no-var</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> a</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">Foo</span><span style="color:#BABED8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Foo</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// eslint-disable-next-line no-var</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">b</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(a) </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(b) </span><span style="color:#676E95;font-style:italic;">// 2</span></span></code></pre></div><p><strong>函数执行解析</strong></p><ol><li>为什么Foo可以在声明前提前执行？ 在JavaScript中函数声明和函数表达式的特点是</li></ol><ul><li>函数声明会提前，而函数表达式则是在运行时赋值</li><li>函数会首先被提升，然后才是变量。也就是说在同一作用域下，函数会先被声明赋值。 这就是Foo可以提前执行的原因</li></ul><ol start="2"><li><p>全局环境中没有声明b为什么可以打印出结果？ 通过代码var a = b = 2，可以看出b在函数Foo内属于自由变量，b并未在函数Foo作用域内声明，仅仅在Foo作用域内赋值，那么结合作用域、作用域链、var声明的作用域来说，参数b被提升至全局作用域，初始值为undefined。</p></li><li><p>为什么a不会被Foo影响？ 在代码初始化时，全局声明了一个参数 a，且并未赋值，当执行Foo时又声明一个参数a，此时这个参数属于Foo的私有变量，有作用域限制，不会被外部访问。</p></li></ol><p><strong>可以重复声明</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// eslint-disable-next-line no-var</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// eslint-disable-next-line no-var</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(a) </span><span style="color:#676E95;font-style:italic;">// 2</span></span></code></pre></div><p><strong>数据污染</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#BABED8;"> (</span><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#BABED8;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">i</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 输出10次 10</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="let、const" tabindex="-1">let、const <a class="header-anchor" href="#let、const" aria-label="Permalink to &quot;let、const&quot;">​</a></h2><p>这两种声明方式属于es6新增的块级作用域声明</p><p><strong>特点</strong></p><ol><li>块级作用域不会被变量提升，只能先声明后访问，否则会造成暂时性死区</li><li>不能重复声明</li><li>const声明的常量不能被修改，如果是引用数据类型，其内部的数据是可以修改的</li></ol><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#BABED8;"> (</span><span style="color:#FF9CAC;">true</span><span style="color:#BABED8;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// console.log(a) 抛出异常 SyntaxError</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">a</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// console.log(b) 抛出异常 SyntaxError</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">b</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">b</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">c</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">c</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">nihao</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">c</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// {name: &#39;nihao&#39;}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(a) </span><span style="color:#676E95;font-style:italic;">// 抛出异常 ReferenceError</span></span></code></pre></div><p><strong>块级作用域能够解决数据污染，以及变量提升</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#BABED8;"> (</span><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#BABED8;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">i</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 输出 0 - 9</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="import" tabindex="-1">import <a class="header-anchor" href="#import" aria-label="Permalink to &quot;import&quot;">​</a></h2><p>es6提供的模块化方案</p><p><strong>导出</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Foo</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">func</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> Foo</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">11111</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p><strong>import引入</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> Utils</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">func</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./utils</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">*</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#BABED8;"> Utils </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./utils</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p><strong>let、const、var的区别</strong></p><ol><li>变量提升 <blockquote><p>let、const不存在变量提升，只有当声明之后才能使用，否则会报错<br> var的声明存在变量提升，可以在声明前使用，直接使用则认为是顶层数据</p></blockquote></li><li>暂时性死区 <blockquote><p>var 不存在暂时性死区，因为var可以变量提升<br> let、const声明的参数，若提前使用则会报错提示无法访问数据或者数据未声明，这种情况称为暂时性死区</p></blockquote></li><li>块级作用域 <blockquote><p>let、const属于块级作用域<br> var 不存在块级作用域，属于全局参数</p></blockquote></li><li>重复声明 <blockquote><p>var可以重复声明<br> const、let不能重复声明</p></blockquote></li><li>修改声明的变量 <blockquote><p>const声明的参数不可修改</p></blockquote></li></ol>`,36),t=[p];function e(c,r,i,y,F,D){return a(),n("div",null,t)}const E=s(o,[["render",e]]);export{A as __pageData,E as default};
