import{_ as t,v as e,b as d,R as o}from"./chunks/framework.22c575f2.js";const a="/assets/dom.05bcf325.png",p=JSON.parse('{"title":"JS中dom操作有哪些方法？","description":"","frontmatter":{"sidebar":{"title":"JS中dom操作有哪些方法？","step":10},"isTimeLine":true,"title":"JS中dom操作有哪些方法？","date":"2020-06-14T00:00:00.000Z","tags":["前端","JavaScript"],"categories":["前端"]},"headers":[],"relativePath":"bigWeb/js/dom.md","filePath":"bigWeb/js/dom.md","lastUpdated":1692085439000}'),l={name:"bigWeb/js/dom.md"},r=o('<h1 id="js中dom操作有哪些方法" tabindex="-1">JS中dom操作有哪些方法？ <a class="header-anchor" href="#js中dom操作有哪些方法" aria-label="Permalink to &quot;JS中dom操作有哪些方法？&quot;">​</a></h1><h2 id="什么是dom元素-什么是节点" tabindex="-1">什么是dom元素？ 什么是节点？ <a class="header-anchor" href="#什么是dom元素-什么是节点" aria-label="Permalink to &quot;什么是dom元素？ 什么是节点？&quot;">​</a></h2><p><strong>Dom全称为Document Object Model，文档对象模型。</strong> 文档表示整个html文档； 对象表示将网页中的每一个元素转化为一个对象； 模型是用来描述对象之间的关系DOMtree，方便获取DOM对象；</p><p><strong>节点：网页中每一个标签都称为节点</strong></p><ul><li>文档节点表示：整个HTML文档，一个页面就是一个文档；</li><li>元素（也称为标签）节点： html中的所有html标签</li><li>属性节点： 元素的属性例如input的 value属性</li><li>文本节点：html标签中的文本</li></ul><p>详情图解： <img src="'+a+'" alt="详情图解"></p><h2 id="dom节点的增加" tabindex="-1">dom节点的增加 <a class="header-anchor" href="#dom节点的增加" aria-label="Permalink to &quot;dom节点的增加&quot;">​</a></h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>父节点.appendChild</td><td>向父节点内添加一个dom</td></tr><tr><td>父节点.insertedBefore(targetDom, newDom)</td><td>在targetDom前新增一个节点newDom</td></tr><tr><td>父节点.insertedAfter(targetDom, newDom)</td><td>在targetDom后新增一个节点newDom</td></tr></tbody></table><h2 id="dom节点的删除" tabindex="-1">dom节点的删除 <a class="header-anchor" href="#dom节点的删除" aria-label="Permalink to &quot;dom节点的删除&quot;">​</a></h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>父节点.removeChild(targetDom)</td><td>父节点将targetDom 删除</td></tr><tr><td>targetDom.remove()</td><td>targetDom 删除自身</td></tr><tr><td>a.replaceChild(b,c)</td><td>：用b替换c,例如document.body.replaceChild(a,b)</td></tr><tr><td>a.replaceWith(b)</td><td>使用b替换a， oldDom.replaceWith(newDom)</td></tr></tbody></table><h2 id="dom节点的更新或者修改属性" tabindex="-1">dom节点的更新或者修改属性 <a class="header-anchor" href="#dom节点的更新或者修改属性" aria-label="Permalink to &quot;dom节点的更新或者修改属性&quot;">​</a></h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>父节点.innerText = xxx</td><td>父节点修改内部文本，也可以通过将innerText设置为&#39;&#39;达到删除的效果， 没有设置=则是获取</td></tr><tr><td>父节点.innerHtml</td><td>获取父节点内部的文本内容，如果设置=则是将内部html或者文本进行替换</td></tr><tr><td>dom.getAttribute</td><td>获取dom的所有属性</td></tr><tr><td>dom.setAttribute</td><td>dom设置属性</td></tr><tr><td>dom.removeAttribute</td><td>dom移除指定属性</td></tr></tbody></table><h2 id="dom节点的查找" tabindex="-1">dom节点的查找 <a class="header-anchor" href="#dom节点的查找" aria-label="Permalink to &quot;dom节点的查找&quot;">​</a></h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>父节点.querySelector</td><td>获取匹配节点的第一个，接收一个class/id/tagName/name</td></tr><tr><td>父节点.querySelectorAll</td><td>获取匹配的所有节点，接收一个class/id/tagName/name， 返回一个NodeList伪数组</td></tr><tr><td>父节点.getElementById</td><td>根据dom的id查找真实dom对象</td></tr><tr><td>父节点.getElementsByClassName</td><td>根据dom的class信息查找真实dom对象，返回一个HtmlCollection伪数组</td></tr><tr><td>父节点.getElementsByTagName</td><td>根据标签名称查找对应的真实dom，返回一个HTMLCollection伪数组</td></tr><tr><td>父节点.getElementsByName</td><td>根据节点的属性名称name，获取对应的真实dom对象列表，返回一个NodeList伪数组</td></tr><tr><td>parentNode</td><td>获取父节点dom,返回html对象</td></tr><tr><td>document.forms</td><td>获取文档内所有的表单, 返回一个HTMLCollection伪数组</td></tr><tr><td>window.frames</td><td>返回所有的iframe标签，返回window对象</td></tr><tr><td>父节点.previousSibling</td><td>获取节点的前一个兄弟节点</td></tr><tr><td>父节点.nextSibling</td><td>获取节点的后一个兄弟节点</td></tr><tr><td>父节点.childNodes</td><td>返回父节点下的所有NodeList元素</td></tr><tr><td>父节点.firstChild</td><td>获取节点的第一个子节点</td></tr><tr><td>父节点.lastChild</td><td>获取节点的最后一个子节点</td></tr></tbody></table><h2 id="dom节点的创建" tabindex="-1">dom节点的创建 <a class="header-anchor" href="#dom节点的创建" aria-label="Permalink to &quot;dom节点的创建&quot;">​</a></h2><table><thead><tr><th style="text-align:right;">方法</th><th style="text-align:right;">描述</th></tr></thead><tbody><tr><td style="text-align:right;">document.createElement</td><td style="text-align:right;">创建节点</td></tr><tr><td style="text-align:right;">document.createTextNode</td><td style="text-align:right;">创建node</td></tr><tr><td style="text-align:right;">document.createDocumentFragment</td><td style="text-align:right;">创建空白文档</td></tr><tr><td style="text-align:right;">dom.cloneNode()</td><td style="text-align:right;">将dom克隆一个新的dom</td></tr></tbody></table><h2 id="htmlcollection和nodelist" tabindex="-1">HTMLCollection和NodeList <a class="header-anchor" href="#htmlcollection和nodelist" aria-label="Permalink to &quot;HTMLCollection和NodeList&quot;">​</a></h2><h3 id="相同点" tabindex="-1">相同点 <a class="header-anchor" href="#相同点" aria-label="Permalink to &quot;相同点&quot;">​</a></h3><ul><li>NodeList 和 HTMLCollection都是非数组，属于类数组或者伪数组</li><li>都存在length属性</li><li>都可以通过索引获取对应的元素</li><li>都无法使用数组的方法，valueOf、pop、push、join</li></ul><h3 id="区别" tabindex="-1">区别 <a class="header-anchor" href="#区别" aria-label="Permalink to &quot;区别&quot;">​</a></h3><ul><li>HTMLCollection是html元素的集合（仅包含元素）</li><li>NodeList是文档节点的集合</li><li>NodeList只能通过索引来获取</li><li>NodeList包含文本节点和属性节点</li><li>HTMLCollection可以通过name、id或或者索引来获取</li></ul><h3 id="获取nodelit的方法" tabindex="-1">获取NodeLit的方法 <a class="header-anchor" href="#获取nodelit的方法" aria-label="Permalink to &quot;获取NodeLit的方法&quot;">​</a></h3><ul><li>document.getElementsByName</li><li>document.querySelectorAll</li><li>element.childNodes</li></ul><h3 id="获取htmlcollection的方法" tabindex="-1">获取HTMLCollection的方法 <a class="header-anchor" href="#获取htmlcollection的方法" aria-label="Permalink to &quot;获取HTMLCollection的方法&quot;">​</a></h3><ul><li>document.getElementsByClassName</li><li>document.getElementsByTagName</li><li>document.forms</li></ul>',25),i=[r];function m(n,h,s,c,b,u){return e(),d("div",null,i)}const x=t(l,[["render",m]]);export{p as __pageData,x as default};
