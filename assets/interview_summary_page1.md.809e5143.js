import{_ as s,v as a,b as e,R as l}from"./chunks/framework.8a901faa.js";const D=JSON.parse('{"title":"浏览器为什么要用es5,es6转es5的过程,构建包的引用关系","description":"","frontmatter":{"sidebar":{"title":"浏览器为什么要用es5,es6转es5的过程,构建包的引用关系","step":10},"isTimeLine":true,"title":"浏览器为什么要用es5,es6转es5的过程,构建包的引用关系","date":"2023-08-17T00:00:00.000Z","author":"马凯","tags":["面试","浏览器"],"categories":["面试"]},"headers":[],"relativePath":"interview/summary/page1.md","filePath":"interview/summary/page1.md","lastUpdated":1692598079000}'),n={name:"interview/summary/page1.md"},o=l(`<h1 id="浏览器为什么要用es5-es6转es5的过程-构建包的引用关系" tabindex="-1">浏览器为什么要用es5,es6转es5的过程,构建包的引用关系 <a class="header-anchor" href="#浏览器为什么要用es5-es6转es5的过程-构建包的引用关系" aria-label="Permalink to &quot;浏览器为什么要用es5,es6转es5的过程,构建包的引用关系&quot;">​</a></h1><h2 id="浏览器为什么需要项目构建时将es6转换为es5" tabindex="-1">浏览器为什么需要项目构建时将es6转换为es5？ <a class="header-anchor" href="#浏览器为什么需要项目构建时将es6转换为es5" aria-label="Permalink to &quot;浏览器为什么需要项目构建时将es6转换为es5？&quot;">​</a></h2><p>答： 为了浏览器兼容，以及为了在 node.js 环境可以顺畅运行应用程序。</p><p>ES6作为JS的新规范，加入了很多新的语法和API，而市面上的浏览器并没有全部兼容，所以需要将ES6语法代码转为ES5的代码。</p><p>现代浏览器对ES6新特性支持度不高，所以要想在浏览器中直接使用ES6的新特性就得借助别的工具来实现。</p><p>在 node.js 环境中，node 对 ES6 的支持一直被诟病，到了 13 版本之后，才出了模块模式（在 package.json 中增加一句：“type”: “module”），但有些库仍然不支持 ES6 语法。因此，如果你的 node.js 程序遇到不认识 ES6 语法的时候，请使用 Babel 转码一下也许就能解决问题。</p><h2 id="es6在构建时转化为es5的过程" tabindex="-1">es6在构建时转化为es5的过程 <a class="header-anchor" href="#es6在构建时转化为es5的过程" aria-label="Permalink to &quot;es6在构建时转化为es5的过程&quot;">​</a></h2><p>es6转为es5，无论是使用的何种构建方式，最终都是通过bable-loader，将代码进行转译后再写入到指定的目录中。</p><p><strong>无论在任何构建器中，都会存在plugin和loader，plugin就为了给构建器提供外部方法，loader则是为构建器提供翻译工具，让构建器能够读懂不同类型的代码，从而调用plugin提供的方法以及构建器的自身方法对代码进行转译。</strong></p><h2 id="项目构建后都有哪些类型文件或者文件夹" tabindex="-1">项目构建后都有哪些类型文件或者文件夹？ <a class="header-anchor" href="#项目构建后都有哪些类型文件或者文件夹" aria-label="Permalink to &quot;项目构建后都有哪些类型文件或者文件夹？&quot;">​</a></h2><p>答：项目构建后产生的文件会存放在构建器配置的outdir目录中，通常不配置则默认为dist。产生的文件类型分为assets、vander、chunk、favico、index.html、boundle、module等</p><p>首先说的一个概念就是浏览器端使用的是require的方式进行资源的加载。</p><h3 id="那么webpack-异步加载分包如何实现" tabindex="-1">那么webpack 异步加载分包如何实现？ <a class="header-anchor" href="#那么webpack-异步加载分包如何实现" aria-label="Permalink to &quot;那么webpack 异步加载分包如何实现？&quot;">​</a></h3><p>该部分参考：<a href="https://zhuanlan.zhihu.com/p/100459699" target="_blank" rel="noreferrer">由浅至深了解webpack异步加载背后的原理</a></p><h2 id="组件化和模块化封装的原则" tabindex="-1">组件化和模块化封装的原则？ <a class="header-anchor" href="#组件化和模块化封装的原则" aria-label="Permalink to &quot;组件化和模块化封装的原则？&quot;">​</a></h2><h3 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h3><ul><li>组件化：如果一个功能多次使用，那么我们将其进行封装，在需要的时候进行调用</li><li>模块化：是指将一组功能进行隔离，使其可以独立运行独立管理，例如vue的页面，vue组件，可以单独作为路由页面，也可以被引用作为组件</li></ul><h3 id="组件化、模块化的原则" tabindex="-1">组件化、模块化的原则 <a class="header-anchor" href="#组件化、模块化的原则" aria-label="Permalink to &quot;组件化、模块化的原则&quot;">​</a></h3><ul><li>功能单一</li><li>可配置性强</li><li>可复用性</li><li>可维护</li></ul><h3 id="模块化和组件化的优势" tabindex="-1">模块化和组件化的优势 <a class="header-anchor" href="#模块化和组件化的优势" aria-label="Permalink to &quot;模块化和组件化的优势&quot;">​</a></h3><ul><li>减少代码重复开发，提高效率</li><li>版本管理可控制</li><li>可维护性强</li></ul><h2 id="es6的import、export和es5中的require、module-exports的区别" tabindex="-1">es6的import、export和es5中的require、module.exports的区别？ <a class="header-anchor" href="#es6的import、export和es5中的require、module-exports的区别" aria-label="Permalink to &quot;es6的import、export和es5中的require、module.exports的区别？&quot;">​</a></h2><h3 id="import和export" tabindex="-1">import和export <a class="header-anchor" href="#import和export" aria-label="Permalink to &quot;import和export&quot;">​</a></h3><p>es6的引入方式</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">111</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> foo </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">sss</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  a</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> foo</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 仅引用a</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// import { a } from &#39;./utils&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 引用默认导出赋值为Utils，此时utils包含a和foo，同时引入一个a</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// import Utils, { a } from &#39;./utils&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 导出所有的方法并赋值为Utils</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// import * as Utils from &#39;./utils&#39;</span></span></code></pre></div><h3 id="require-module-exports" tabindex="-1">require，module.exports <a class="header-anchor" href="#require-module-exports" aria-label="Permalink to &quot;require，module.exports&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">foo</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">foo</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">a</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;">a</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// utils内包含foo和a</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> Utils </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./utils</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span></code></pre></div><h3 id="构建后" tabindex="-1">构建后 <a class="header-anchor" href="#构建后" aria-label="Permalink to &quot;构建后&quot;">​</a></h3>`,30),p=[o];function t(r,i,c,y,d,u){return a(),e("div",null,p)}const F=s(n,[["render",t]]);export{D as __pageData,F as default};
