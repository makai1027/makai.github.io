import{_ as c,v as n,b as r,C as p,O as s,a6 as l,R as a,M as F,G as t,L as e}from"./chunks/framework.22c575f2.js";const E=JSON.parse('{"title":"JS中原型和原型链","description":"","frontmatter":{"sidebar":{"title":"JS中原型和原型链","step":10},"isTimeLine":true,"title":"JS中原型和原型链","date":"2020-07-11T00:00:00.000Z","tags":["前端","JavaScript"],"categories":["前端"]},"headers":[],"relativePath":"bigWeb/js/prototype.md","filePath":"bigWeb/js/prototype.md","lastUpdated":1692174081000}'),y={name:"bigWeb/js/prototype.md"},D=a(`<h1 id="javascript中的原型和原型链" tabindex="-1">JavaScript中的原型和原型链 <a class="header-anchor" href="#javascript中的原型和原型链" aria-label="Permalink to &quot;JavaScript中的原型和原型链&quot;">​</a></h1><h2 id="原型" tabindex="-1">原型 <a class="header-anchor" href="#原型" aria-label="Permalink to &quot;原型&quot;">​</a></h2><p>JavaScript是一种基于原型的语言，每一个构造函数都有一个原型对象。</p><p>每一个函数都有很多属性(name,length,constructor,prototype等),<strong>但是有一个特殊的属性prototype，该属性指向原型对象</strong>，包含两个属性constructor和[[prototype]]</p><p>prototype内部的[[prototype]]是prototype的原型对象</p><p>举个例子：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">func</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">func</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype)</span></span></code></pre></div><p>控制台输出如下：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// func.prototype</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">constructor</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">func</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    [[</span><span style="color:#A6ACCD;">prototype</span><span style="color:#F07178;">]]: </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 真实显示为[[prototype]]或者&lt;prototype&gt;</span></span>
<span class="line"><span style="color:#F07178;">        constructor</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        hasOwnProperty</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">hasOwnProperty</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        isPrototypeOf</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">isPrototypeOf</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        propertyIsEnumerable</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">propertyIsEnumerable</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        toLocaleString</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">toLocaleString</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        toString</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">toString</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        valueOf</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">valueOf</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        __proto__</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            constructor</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            hasOwnProperty</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">hasOwnProperty</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            isPrototypeOf</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">isPrototypeOf</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            propertyIsEnumerable</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">propertyIsEnumerable</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            toLocaleString</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">toLocaleString</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            toString</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">toString</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            valueOf</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">valueOf</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            __proto__</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>由console.log(func.prototype)的打印结果可以得知</p>`,10),A=a(`<h2 id="原型链" tabindex="-1">原型链 <a class="header-anchor" href="#原型链" aria-label="Permalink to &quot;原型链&quot;">​</a></h2><p>JavaScript的每一个对象都有一个属性__proto__，这个属性指向的是该对象的原型。<strong>除了null，null属于顶层原型</strong></p><p>当试图访问一个对象的属性时，JavaScript引擎不仅仅在该对象本身查找该属性，还会在对象的原型上，以及该对象原型的原型，依次层层查找，直到找到该属性或者找到原型链的末尾null，则停止。</p><p>该查找的过程中原型与原型的关系称之为原型链。</p><p>举个例子：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">func</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(func</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__)</span></span></code></pre></div><p><strong>返回结果</strong></p><blockquote><p>我是用的火狐浏览器，谷歌浏览器func.__proto__打印不出来</p></blockquote><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// func.__proto__</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">constructor</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Function</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">bind</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">f</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">bind</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">call</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">f</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">apply</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">f</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">apply</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">name</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">length</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    [[</span><span style="color:#A6ACCD;">prototype</span><span style="color:#F07178;">]]: </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 真实显示为[[prototype]]或者&lt;prototype&gt;</span></span>
<span class="line"><span style="color:#F07178;">        constructor</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        hasOwnProperty</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">hasOwnProperty</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        isPrototypeOf</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">isPrototypeOf</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        propertyIsEnumerable</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">propertyIsEnumerable</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        toLocaleString</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">toLocaleString</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        toString</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">toString</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        valueOf</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">valueOf</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        __proto__</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            constructor</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            hasOwnProperty</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">hasOwnProperty</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            isPrototypeOf</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">isPrototypeOf</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            propertyIsEnumerable</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">propertyIsEnumerable</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            toLocaleString</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">toLocaleString</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            toString</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">toString</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            valueOf</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">valueOf</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            __proto__</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>通过观察结果发现一个问题，func.__proto__指向的是Function的原型对象，那么func.prototype.__proto__不应该也是指向的Function的原型对象吗？？？</p><p>测试结果：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(func</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__ </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype) </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">func</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__ </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype) </span><span style="color:#676E95;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">func</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__ </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype) </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__ </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype) </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__ </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// true</span></span></code></pre></div><blockquote><p><strong>有一点我有点疑惑，为什么函数func.prototype.__proto__不是指向Function，而是Object？</strong></p></blockquote><p>通过以上测试结果可知,func的原型链关系图如下：</p>`,14),i=a(`<p>为了更全面的测试，引入构造函数实例。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">func</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> _func </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">func</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(_func</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__) </span><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">_func</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype) </span><span style="color:#676E95;font-style:italic;">// undefined</span></span></code></pre></div><blockquote><p><strong>为什么new 出来的新函数没有prototype？</strong></p></blockquote><p>_func.__proto__的打印结果</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">constructor</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Func</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    [[</span><span style="color:#A6ACCD;">prototype</span><span style="color:#F07178;">]]: </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 真实显示为[[prototype]]或者&lt;prototype&gt;</span></span>
<span class="line"><span style="color:#F07178;">        constructor</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        hasOwnProperty</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">hasOwnProperty</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        isPrototypeOf</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">isPrototypeOf</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        propertyIsEnumerable</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">propertyIsEnumerable</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        toLocaleString</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">toLocaleString</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        toString</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">toString</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        valueOf</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">valueOf</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        __proto__</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            constructor</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            hasOwnProperty</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">hasOwnProperty</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            isPrototypeOf</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">isPrototypeOf</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            propertyIsEnumerable</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">propertyIsEnumerable</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            toLocaleString</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">toLocaleString</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            toString</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">toString</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            valueOf</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">valueOf</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            __proto__</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>通过以上测试结果可知,_func/func的原型链关系图如下：</p>`,6),C=a('<p><em><strong>原型链关系流程分析</strong></em></p><ul><li>函数func的属性prototype指向func的原型对象，就是func.prototype，只有函数本身才有原型对象，如果是new创建的实例只能通过__proto__查看继承关系，没有prototype</li><li>构造函数实例_func的__proto__指向构造函数func的原型对象，也就是func.prototype</li><li>func.prototype.<strong>proto</strong> 指向内置对象，因为 func.prototype 是个对象，默认是由 Object 函数作为类创建的，而 Object.prototype 为内置对象</li><li>func.__proto__指向的内置匿名函数，因为func是一个函数，所以默认由Function作为构造函数创建，至于为什么func是一个构造函数，不是一个实例稍后解释</li><li>Function.prototype 和 Function.<strong>proto</strong> 同时指向内置匿名函数 anonymous，Function.prototype.__proto__指向内置对象Object.prototype,Object.prototype.__proto__指向的又是null，这样原型链的终点就是 null</li></ul><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>__proto__作为不同对象的链接关系，用来指向创建该对象的构造函数的原型对象。</p><p>每个对象的__proto__都是指向它的构造函数的原型对象prototype的</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">_func</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__ </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">func</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span></span></code></pre></div><p>构造函数是一个函数对象，是通过 Function 构造器产生的</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">func</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__ </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span></span></code></pre></div><p>原型对象本身是一个普通对象，而普通对象的构造函数都是Object</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">func</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__ </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span></span></code></pre></div><p>刚刚上面说了，所有的构造器都是函数对象，函数对象都是 Function 构造产生的</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__ </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span></span></code></pre></div><p>Object 的原型对象也有__proto__属性指向null，null是原型链的顶端</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__ </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span></span></code></pre></div><ul><li><p>一切对象都是继承自Object对象，Object 对象直接继承根源对象 null</p></li><li><p>一切的函数对象（包括 Object 对象），都是继承自 Function 对象</p></li><li><p>Object 对象直接继承自 Function 对象</p></li><li><p>Function对象的__proto__会指向自己的原型对象，最终还是继承自Object对象</p></li></ul><h2 id="引申问题" tabindex="-1">引申问题 <a class="header-anchor" href="#引申问题" aria-label="Permalink to &quot;引申问题&quot;">​</a></h2><ul><li>为什么函数func.prototype.__proto__不是指向Function，而是Object？</li></ul><blockquote><p>解释，因为函数func是Function的一个实例，所以func.__proto__指向的是Function，另外就是Function因为本身是一个函数所以实例化返回得也是一个函数，那么就造成了func.prototype.__proto__指向的是Object，而不是Function</p></blockquote><ul><li><a href="./prototype2.html">为什么new 出来的新函数没有prototype？</a></li></ul><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://github.com/mqyqingfeng/Blog/issues/2" target="_blank" rel="noreferrer">JavaScript深入之从原型到原型链</a></li><li><a href="https://github.com/febobo/web-interview/issues/59" target="_blank" rel="noreferrer">面试官：JavaScript原型，原型链 ? 有什么特点</a></li></ul>',21);function u(_,f,g,d,b,h){const o=F("Mermaid");return n(),r("div",null,[D,(n(),p(l,null,{default:s(()=>[t(o,{id:"mermaid-26",graph:"flowchart%20LR%0A%20%20%20%20start%5Bfunc%5D%20--%3E%7Cprototype%7C%20proto%5Bfunc.prototype%5D%0A%20%20%20%20proto%20--%3E%7Cconstructor%7C%20start%0A%0A"})]),fallback:s(()=>[e(" Loading... ")]),_:1})),A,(n(),p(l,null,{default:s(()=>[t(o,{id:"mermaid-67",graph:"flowchart%20LR%0A%20%20%20%20start%5Bfunc%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%5D%20--%3E%7Cprototype%7C%20proto%5Bfunc.prototype%E5%87%BD%E6%95%B0%E5%8E%9F%E5%9E%8B%5D%0A%20%20%20%20proto%20--%3E%7Cconstructor%7C%20start%0A%20%20%20%20proto%20--%3E%7C__proto__%7C%20proto2%5BObject.prototype%5D%0A%20%20%20%20proto2%20--%3E%7Cconstructor%7C%20start2%5BObject%5D%0A%20%20%20%20start2%20--%3E%7Cprototype%7C%20proto2%0A%20%20%20%20proto2%20--%3E%7C__proto__%7C%20null%0A%0A"})]),fallback:s(()=>[e(" Loading... ")]),_:1})),i,(n(),p(l,null,{default:s(()=>[t(o,{id:"mermaid-84",graph:"flowchart%20LR%0A%20%20%20%20start%5Bfunc%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%5D%20--%3E%7Cprototype%7C%20proto%5Bfunc.prototype%E5%87%BD%E6%95%B0%E5%8E%9F%E5%9E%8B%5D%0A%20%20%20%20proto%20--%3E%7Cconstructor%7C%20start%0A%20%20%20%20proto%20--%3E%7C__proto__%7C%20proto2%5BObject.prototype%5D%0A%20%20%20%20proto2%20--%3E%7Cconstructor%7C%20start2%5BObject%5D%0A%20%20%20%20start2%20--%3E%7Cprototype%7C%20proto2%0A%20%20%20%20proto2%20--%3E%7C__proto__%7C%20null%0A%20%20%20%20start%20--%3E%7Cnew%7C%20_func%5B_func%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9E%E4%BE%8B!%5D%0A%20%20%20%20_func%20--%3E%7C__proto__%7C%20proto%0A%0A"})]),fallback:s(()=>[e(" Loading... ")]),_:1})),C])}const m=c(y,[["render",u]]);export{E as __pageData,m as default};
