import{_ as r,v as a,b as F,C as o,O as s,a6 as p,R as t,F as c,L as n,M as y,G as e}from"./chunks/framework.3d3e5663.js";const i="/assets/eventLoop.00c60ebc.jpeg",D="/assets/node_event_loop.24c533d4.png",A="/assets/event_loop2.3ac6c7a3.webp",E="/assets/node_eventloop_result.988989f2.png",q=JSON.parse('{"title":"JavaScript-事件循环（EventLoop）","description":"JavaScript-事件循环（EventLoop）","frontmatter":{"mermaidTheme":"forest","siderbar":{"title":"JavaScript-事件循环（EventLoop）"},"isTimeLine":true,"title":"JavaScript-事件循环（EventLoop）","keywords":"JavaScript,事件循环,EventLoop,微任务,宏任务,微任务队列,宏任务队列","description":"JavaScript-事件循环（EventLoop）","date":"2020-05-15T10:00:00.000Z","author":"马凯","aside":true,"tags":["前端","JavaScript"],"categories":["前端"]},"headers":[],"relativePath":"bigWeb/js/eventLoop.md","filePath":"bigWeb/js/eventLoop.md","lastUpdated":1714984234000}'),B={name:"bigWeb/js/eventLoop.md"},m=t('<h1 id="javascript-事件循环-eventloop" tabindex="-1">JavaScript-事件循环（EventLoop） <a class="header-anchor" href="#javascript-事件循环-eventloop" aria-label="Permalink to &quot;JavaScript-事件循环（EventLoop）&quot;">​</a></h1><p>JavaScript中线程和进程的区别</p><p><strong>进程：正在运行的程序实例，包括程序代码、数据、堆栈和资源等等</strong><strong>线程：线程是进程的一个单元，一个进程可能会有多个线程，例如事件循环的主执行栈、微任务队列、宏任务队列，就是利用了浏览器的多线程，他们共享了同一个进程的内存空间和地址，但又各自管理自己的堆栈和执行状态。</strong></p><h2 id="什么是事件循环-为什么要使用事件循环" tabindex="-1">什么是事件循环，为什么要使用事件循环？ <a class="header-anchor" href="#什么是事件循环-为什么要使用事件循环" aria-label="Permalink to &quot;什么是事件循环，为什么要使用事件循环？&quot;">​</a></h2><blockquote><p>JavaScript事件循环是异步事件和回调函数的处理方式，它是实现异步编程的核心。当JS在浏览器或者nodeJS执 行时，事件循环用于任务队列和调用栈管理，方便在适当的时候进行调用。</p></blockquote><p><strong>JS事件处理属于单线程的，主要原因在于不能一边删除dom，一遍添加dom，要控制先后顺序，事件循环就是处理单线程队列阻塞和管理事件调用机制的方式，所以JS的事件只能按照调用的顺序执行。</strong></p><p><strong>这里说的JS单线程是指JavaScript引擎的线程，是指负责执行JS语法的主线程。该线程与浏览器GUI引擎的线程是互斥的，互斥的原因在于JS引擎操作dom，GUI用户渲染dom，如果他们同时进行，就会造成混乱，不清楚最终需要渲染哪一个dom。如此设计的后果就是如果JS长时间执行没有结果，则会造成GUI不渲染，也就是页面白屏，所以while(true)如果没有break是绝对不允许的。</strong></p><blockquote><p>JS 事件类型分为同步任务和异步任务，异步任务又分为宏任务和微任务。<br>同步任务是连贯性执行；<br>异步任务，不是连续执行的而是先执行一段，等待事件准备完毕，再回头执行第二段，第二段也叫做回调；</p></blockquote><p>JS异步的实现靠的就是浏览器的多线程，当遇到异步任务时，将这个任务交给对应的线程处理，当该异步任务满足回调条件时，对应的线程又通过事件触发线程将这个回调事件存放到任务队列内，主程序从任务队列取出事件继续执行。</p><h2 id="同步任务和异步任务" tabindex="-1">同步任务和异步任务 <a class="header-anchor" href="#同步任务和异步任务" aria-label="Permalink to &quot;同步任务和异步任务&quot;">​</a></h2><blockquote><p><strong>同步任务:</strong> 在主线程上排队进入执行栈，只有前一个任务执行完毕，才会执行下一个任务，按照读取顺序执行；</p></blockquote><blockquote><p><strong>异步任务：</strong> 异步任务被读取后不会立即放入执行队列，而是进入任务队列等待执行结果，只有任务队列获取到异步任务的执行结果才会推入执行栈执行</p></blockquote>',12),d=c("p",null,[n("任务队列"),c("strong",null,"TaskQueue"),n("，即队列，是一种先进先出的一种数据结构")],-1),u=t(`<h3 id="看一下简单的执行顺序" tabindex="-1">看一下简单的执行顺序 <a class="header-anchor" href="#看一下简单的执行顺序" aria-label="Permalink to &quot;看一下简单的执行顺序&quot;">​</a></h3><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">syncFn</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">time</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#FF9CAC;">true</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">+new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">time</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2000</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">break</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">1</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#82AAFF;">syncFn</span><span style="color:#BABED8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">3</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 执行结果：上述代码会先打印出1，然后调用syncFn，syncFn内部会等待2s，然后打印2，最后打印3。整个打印顺序跟代码书写顺序一致，所以以上是同步代码。</span></span></code></pre></div><p><strong>举例异步任务</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">syncFn</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2000</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">1</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#82AAFF;">syncFn</span><span style="color:#BABED8;">()</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">3</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 执行结果：1,3，等待2s后，打印2，这就体现了我们对事件循环的解释，同步任务先行，异步任务存放到对应队列后等待执行结果</span></span></code></pre></div><h2 id="异步任务分类" tabindex="-1">异步任务分类 <a class="header-anchor" href="#异步任务分类" aria-label="Permalink to &quot;异步任务分类&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Promise的声明本身是同步，只有他的resolve和catch是异步的！！！</p></div><p>异步任务又分为：<strong>宏任务队列</strong>和<strong>微任务队列</strong>，JavaScript引擎在读取到JS时，先生成一个全局执行上下文，按照读取顺序将同步任务推入全局执行上下文执行，遇到异步任务，根据微任务和宏任务的区别，分别存放到微任务队列（micro-task）和宏任务队列（macro-task）</p><p><strong>宏任务包括</strong>：setTimeout、setInterval、setImmediate（node环境）、requestAnimationFrame、I/O、UIrender、http请求、postMessage</p><p><strong>微任务队列</strong>：Promise.then、promise.catch、mutationObserver（dom更新检测回调）、process.nextTick(node端)、async/await</p><h2 id="eventloop任务执行顺序" tabindex="-1">EventLoop任务执行顺序 <a class="header-anchor" href="#eventloop任务执行顺序" aria-label="Permalink to &quot;EventLoop任务执行顺序&quot;">​</a></h2><h3 id="浏览器eventloop" tabindex="-1">浏览器EventLoop <a class="header-anchor" href="#浏览器eventloop" aria-label="Permalink to &quot;浏览器EventLoop&quot;">​</a></h3><blockquote><ol><li>浏览器在执行第一个js之后，会在生成一个全局执行上下文，同时声明一个执行栈，js文本从上到下开始将同步任务推到执行栈执行，遇到异步任务，则按照异步任务类型将异步任务推到微任务队列和宏任务队列 <br></li><li>当所有的微任务执行完毕之后开始从宏任务队列中取一个宏任务放入执行栈，该宏任务执行完毕之后，再去检查微任务队列， <br></li><li>重复以上步骤直到所有的任务执行结束</li></ol></blockquote><p><strong>执行流程图解</strong><img src="`+i+`" alt="执行流程图解"></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>注意📢：</p><ol><li>一个EventLoop可以有多个事件队列，但是只能有一个微任务队列</li><li>微任务队列全部执行完毕会重新渲染一次</li><li>每一个宏任务执行完毕都会重新渲染一次</li><li>requestAnimationFrame处于渲染阶段时，既不属于红任务也不属于微任务。</li></ol></div><h2 id="宏任务settimeout的理解误区" tabindex="-1">宏任务setTimeout的理解误区 <a class="header-anchor" href="#宏任务settimeout的理解误区" aria-label="Permalink to &quot;宏任务setTimeout的理解误区&quot;">​</a></h2><p>setTimeout的回调函数不一定在指定时间后一定执行，而是在指定时间后，将回调函数放入事件循环的宏任务队列内；</p><p>如果说延时时间到了之后，JS引擎还在执行同步任务，或者还在执行微任务，这个回调函数就需要等待，如果当前宏任务队列还有其他的任务，在队列前边待执行，那么也是需要等待的；</p><p>另外，setTimeout 第二个参数也就是delay时间，如果不写则默认是4ms；</p><p>按照以上的思路，我们写个例子。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">syncFn</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">startTime</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">调用同步任务</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">startTime</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">time</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#FF9CAC;">true</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">+new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">time</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">5000</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">break</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">subTime</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">startTime</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">同步任务执行时间差：</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">subTime</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">ms</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">asyncFn</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">startTime</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">调用异步任务</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">startTime</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">subTime</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">startTime</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">异步任务执行时间差：</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">subTime</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">ms</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2000</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> startTime </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">+new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#BABED8;">()</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 让异步任务先被读取，存放到宏任务队列</span></span>
<span class="line"><span style="color:#82AAFF;">asyncFn</span><span style="color:#BABED8;">(startTime)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 在读取同步任务，放入全局执行上下文执行</span></span>
<span class="line"><span style="color:#82AAFF;">syncFn</span><span style="color:#BABED8;">(startTime)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 打印结果</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 调用异步任务 1691990635585</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 调用同步任务 1691990635585</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 同步任务执行时间差：5001ms</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 异步任务执行时间差：5003ms</span></span></code></pre></div><blockquote><p>从以上结果可以看出，虽然我们先调用的宏任务setTimeout，也写了在2s后打印执行结果，但是因为同步任务syncFn执行时间过长，导致在2s后，异步任务已经在队列中等待执行了，因为全局执行上下文中有一个正在执行的同步任务。<strong>这里也提示各位，一定要注意代码不要占用主执行栈太长时间。</strong></p></blockquote><h2 id="nodejs-中的eventloop" tabindex="-1">NodeJs 中的EventLoop <a class="header-anchor" href="#nodejs-中的eventloop" aria-label="Permalink to &quot;NodeJs 中的EventLoop&quot;">​</a></h2><p><img src="`+D+'" alt="node运行示意图"></p><p>Node中的EventLoop是基于libuv实现的，而libuv是Node的新跨平台抽象层，libuv使用异步，事件驱动的编成方式，核心提供I/O的事件循环和异步回调。以下是Node端EventLoop的各个阶段：</p><p><img src="'+A+'" alt="nodeEventLoop阶段图"></p><p>node的EventLoop一共有六个阶段，每一个阶段细节如下：</p><ul><li><strong>timers</strong>: 执行setTimeout和setInterval中的待执行回调函数callbacks</li><li><strong>pending Callback</strong>: 上一轮循环中少数的callback会放在该阶段执行</li><li><strong>idel,prepare</strong>: 仅在内部使用</li><li><strong>poll</strong>: 最重要的阶段，执行pending callback，在适当的情况下会阻塞在这个阶段。</li><li><strong>check</strong>: 执行setImmediate(setImmediate是将事件插入到事件队列尾部主线程和事件队列的函数执行完之后立即执行setImmediate指定的回调函数)的callback</li><li><strong>close callback</strong>： 执行close事件的callback，例如socket.on(&#39;close&#39;, [,fn])或者http.server.on(&#39;close&#39;,[,fn])</li></ul><p>每一个阶段都有自己先进先出的任务队列，只有当这个队列的事件执行完毕或者达到该阶段的上限时，才会进入下一个阶段。在每次事件循环阶之间都会检查是否等待任何一个IO或者定时器，如果没有，则程序退出；</p><p>还有个需要注意的是poll阶段，<strong>它后面并不一定每次都是check阶段，poll队列执行完后</strong>，如果没有setImmediate但是有定时器到期，他会绕回去执行定时器阶段：</p>',29),C=t(`<h2 id="setimmediate和settimeout到底谁先执行" tabindex="-1">setImmediate和setTimeout到底谁先执行？ <a class="header-anchor" href="#setimmediate和settimeout到底谁先执行" aria-label="Permalink to &quot;setImmediate和setTimeout到底谁先执行？&quot;">​</a></h2><blockquote><p>通过上方的流程图，我们可以清晰地看到，在一个异步流程内，setImmediate会比setTimeout先执行，我们通过代码测试一下。</p></blockquote><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">1</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">setTimeout</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">setImmediate</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">setImmediate</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 执行结果</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// setImmediate</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// setTimeout</span></span></code></pre></div><p>如上图释义的一样，setTimeout的回调函数内，setImmediate先执行了，分析流程如下：</p><blockquote><ol><li>同步任务console.log1先执行<br></li><li>然后执行setTimeout，等待其可执行时，刚好处于timers阶段<br></li><li>当执行第一个外层setTimeout回调时，遇到第二个setTimeout，那么该setTimeout会在下次的timers阶段执行<br></li><li>再继续处理到setImmediate时，将它加入到check阶段的队列中<br></li><li>第一个setTimeout在本次timers阶段执行完毕，进入pending callback -&gt; idle -&gt; prepare -&gt; poll,这几个阶段的队列都是空，所以自然进入了下一个阶段check<br></li><li>当进入check阶段时，检查队列中有一个setImmediate回调，按顺序执行该回调<br></li><li>然后进入close callback阶段，再次检查timers队列，发现存放了setTimeout callback，也就是第二个setTimeout，执行该setTimeout的回调函数</li></ol></blockquote><p><strong>如果说不用setTimeout包裹setTimeout、setImmediate那么它们的执行顺序将不会是固定的。</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">1</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">setTimeout</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">setImmediate</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">setImmediate</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#BABED8;">)</span></span></code></pre></div><p>多次执行会发现可能是setTimeout先执行，也可能是setImmediate先执行，结果如图：</p><p><img src="`+E+`" alt="执行结果"></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在nodejs中，setTimeout(fn, [,delay]) delay参数会被强制更改为1，<a href="https://link.segmentfault.com/?enc=nwZ7ZHLLaubbSaeDQkUOgg%3D%3D.k0fJ5nqSx3PfXyG7pCGbpk%2Bs1CHMXOvwUaaTpophJIQ2CNVi4LZVI5xfCmyZC8UKECRvH1TTDI5OSA54TdJZzpvlRmh4dy48FpcWWP6XRY8%3D" target="_blank" rel="noreferrer">官方解释</a>,setTimeout在html中默认最小delay时间是4ms</p></div><p>根据上述要点，分析流程如下：</p><blockquote><ol><li>外层同步代码一次性全部执行完，遇到异步API就塞到对应的阶段</li><li>遇到setTimeout，虽然设置的是0毫秒触发，但是被node.js强制改为1毫秒，塞入times阶段</li><li>遇到setImmediate塞入check阶段</li><li>同步代码执行完毕，进入下一次Event Loop</li><li>先进入times阶段，检查当前时间过去了1毫秒没有，如果过了1毫秒，满足setTimeout条件，执行回调，如果没过1毫秒，跳过</li><li>跳过空的阶段，进入check阶段，执行setImmediate回调</li></ol></blockquote><p>通过上述流程的梳理，我们发现关键就在这个1毫秒，如果同步代码执行时间较长，进入Event Loop的时候1毫秒已经过了，setTimeout执行，如果1毫秒还没到，就先执行了setImmediate。每次我们运行脚本时，机器状态可能不一样，导致运行时有1毫秒的差距，一会儿setTimeout先执行，一会儿setImmediate先执行。但是这种情况只会发生在还没进入timers阶段的时候。像我们第一个例子那样，因为已经在timers阶段，所以里面的setTimeout只能等下个循环了，所以setImmediate肯定先执行。同理的还有其他poll阶段的API也是这样的，比如：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> fs </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">node:fs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readFile</span><span style="color:#BABED8;">(__filename</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">setTimeout</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">setImmediate</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">setImmediate</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre></div><p>这里setTimeout和setImmediate在readFile的回调里面，由于readFile回调是I/O操作，他本身就在poll阶段，所以他里面的定时器只能进入下个timers阶段，但是setImmediate却可以在接下来的check阶段运行，所以setImmediate肯定先运行，他运行完后，去检查timers，才会运行setTimeout。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">setImmediate</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">setTimeout</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">setImmediate</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">setImmediate</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre></div><p>原因跟写在最外层差不多，因为setImmediate已经在check阶段了，里面的循环会从timers阶段开始，会先看setTimeout的回调，如果这时候已经过了1毫秒，就执行他，如果没过就执行setImmediate。</p><h2 id="process-nexttick" tabindex="-1">process.nextTick() <a class="header-anchor" href="#process-nexttick" aria-label="Permalink to &quot;process.nextTick()&quot;">​</a></h2><p>process.nextTick()是一个特殊的异步API，他不属于任何的Event Loop阶段。事实上Node在遇到这个API时，Event Loop根本就不会继续进行，会马上停下来执行process.nextTick()，这个执行完后才会继续Event Loop。我们写个例子来看下：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> fs </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">node:fs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readFile</span><span style="color:#BABED8;">(__filename</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">setTimeout</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">setImmediate</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">setImmediate</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">process</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">nextTick</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">nextTick 2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">process</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">nextTick</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">nextTick 1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 执行结果如下</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// nextTick 1</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// setImmediate</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// nextTick 2</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// setTimeout</span></span></code></pre></div><p>流程分析：</p><blockquote><ol><li>我们代码基本都在readFile回调里面，他自己执行时，已经在poll阶段</li><li>遇到setTimeout(fn, 0)，其实是setTimeout(fn, 1)，塞入后面的timers阶段</li><li>遇到setImmediate，塞入后面的check阶段</li><li>遇到nextTick，立马执行，输出&#39;nextTick 1&#39;</li><li>到了check阶段，输出&#39;setImmediate&#39;,又遇到个nextTick,立马输出&#39;nextTick 2&#39;</li><li>到了下个timers阶段，输出&#39;setTimeout&#39;</li></ol></blockquote><p>这种机制其实类似于我们前面讲的微任务，但是并不完全一样,比如同时有nextTick和Promise的时候，肯定是nextTick先执行，原因是nextTick的队列比Promise队列优先级更高。来看个例子:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> promise </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#BABED8;">()</span></span>
<span class="line"><span style="color:#82AAFF;">setImmediate</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">setImmediate</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">promise</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">process</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">nextTick</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">nextTick</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 执行结果</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// nextTick</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// promise</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// setImmediate</span></span></code></pre></div><h2 id="参考文档" tabindex="-1">参考文档 <a class="header-anchor" href="#参考文档" aria-label="Permalink to &quot;参考文档&quot;">​</a></h2><ul><li><a href="https://www.wenjiangs.com/article/tzzt0cny.html" target="_blank" rel="noreferrer">面试之 Event Loop，nextTick() 和 setImmediate() 区别分析</a></li><li><a href="https://segmentfault.com/a/1190000023315304" target="_blank" rel="noreferrer">setTimeout和setImmediate到底谁先执行，本文让你彻底理解Event Loop</a></li><li><a href="https://www.cnblogs.com/gxw123/p/13301687.html" target="_blank" rel="noreferrer">JS中的宏任务和微任务的区别和用法</a></li></ul>`,26);function g(h,b,k,T,v,f){const l=y("Mermaid");return a(),F("div",null,[m,(a(),o(p,null,{default:s(()=>[e(l,{id:"mermaid-44",graph:"classDiagram%0A%20%20%20%20note%20%22%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%EF%BC%8C%20ExecutionStack%EF%BC%9A%E6%89%A7%E8%A1%8C%E6%A0%88%EF%BC%8CTaskQueue%EF%BC%9A%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97%22%0A%20%20%20%20ExecutionStack%20--%7C%3E%20WebAPIs%0A%20%20%20%20WebAPIs%20--%7C%3E%20TaskQueue%0A%20%20%20%20TaskQueue%20--%7C%3E%20ExecutionStack%0A%20%20%20%20class%20ExecutionStack%20%7B%0A%20%20%20%20%20%20%20%20%2B%20function()%0A%20%20%20%20%20%20%20%20%2B%20function()%0A%20%20%20%20%20%20%20%20%2B%20function()%0A%20%20%20%20%7D%0A%0A%20%20%20%20class%20WebAPIs%20%7B%0A%20%20%20%20%20%20%20%20%2BDOM%0A%20%20%20%20%20%20%20%20%2BhttpRequest%0A%20%20%20%20%20%20%20%20%2BsetTimeout%0A%20%20%20%20%20%20%20%20%2BpostMessage%0A%20%20%20%20%7D%0A%0A%20%20%20%20class%20TaskQueue%20%7B%0A%20%20%20%20%20%20%20%20%2BonLoad%0A%20%20%20%20%20%20%20%20%2BonClick%0A%20%20%20%20%7D%0A%0A%0A"})]),fallback:s(()=>[n(" Loading... ")]),_:1})),d,(a(),o(p,null,{default:s(()=>[e(l,{id:"mermaid-48",graph:"graph%20TD%0A%20%20%20%20A%5B%E4%BB%BB%E5%8A%A1%E8%BF%9B%E5%85%A5%E6%89%A7%E8%A1%8C%E6%A0%88%5D%20--%3E%20B%7B%7B%E5%88%A4%E6%96%AD%E6%98%AF%E5%AE%8F%E4%BB%BB%E5%8A%A1%E8%BF%98%E6%98%AF%E5%BE%AE%E4%BB%BB%E5%8A%A1%7D%7D%0A%20%20%20%20B%20--%3E%7C%E5%90%8C%E6%AD%A5%7C%20C%5B%E4%B8%BB%E7%BA%BF%E7%A8%8B%5D%0A%20%20%20%20C%20--%3E%20E%5B%E5%90%8C%E6%AD%A5%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E5%AE%8C%E6%AF%95%5D%0A%20%20%20%20E%20--%3E%20G%5B%E8%AF%BB%E5%8F%96%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97%E4%B8%AD%E7%9A%84%E7%BB%93%E6%9E%9C%2C%E8%BF%9B%E5%85%A5%E4%B8%BB%E7%BA%BF%E7%A8%8B%E6%89%A7%E8%A1%8C%5D%0A%20%20%20%20B%20--%3E%7C%E5%BC%82%E6%AD%A5%7C%20D%5BEventTable%5D%0A%20%20%20%20D%20--%3E%7C%E6%B3%A8%E5%86%8C%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%7C%20F%5BEventQueue%5D%0A%20%20%20%20F%20%3C--%3E%20G%0A%0A%0A"})]),fallback:s(()=>[n(" Loading... ")]),_:1})),u,(a(),o(p,null,{default:s(()=>[e(l,{id:"mermaid-203",graph:"graph%20TD%0A%20%20%20%20A%5B%E8%BF%9B%E5%85%A5poll%E9%98%B6%E6%AE%B5%5D%20--%3E%20B%7B%7Bpoll%E9%98%9F%E5%88%97%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA%E6%88%96%E8%80%85%E8%BE%BE%E5%88%B0%E4%B8%8A%E9%99%90%3F%7D%7D%0A%20%20%20%20B%20--%3E%7C%E6%98%AF%7C%20C%7B%7B%E6%98%AF%E5%90%A6%E8%AE%BE%E7%BD%AE%E4%BA%86setImmediate%20callback%3F%7D%7D%0A%20%20%20%20C%20--%3E%7C%E6%98%AF%7C%20D%5B%E8%BF%9B%E5%85%A5check%E9%98%B6%E6%AE%B5%5D%0A%20%20%20%20B%20--%3E%7C%E5%90%A6%7C%20E%5B%E6%89%A7%E8%A1%8Cpoll%E9%98%9F%E5%88%97%E7%9A%84callback%5D%0A%20%20%20%20E%20--%3E%20A%0A%20%20%20%20C%20--%3E%7C%E5%90%A6%7C%20F%5B%E7%AD%89%E5%BE%85callback%E5%8A%A0%E5%85%A5poll%E9%98%9F%E5%88%97%5D%0A%20%20%20%20F%20--%3E%20J%7B%7B%E6%98%AF%E5%90%A6%E6%9C%89timer%E7%9A%84callback%E5%BE%85%E6%89%A7%E8%A1%8C%7D%7D%0A%20%20%20%20J%20--%3E%7C%E6%98%AF%7C%20K%5B%E8%BF%9B%E5%85%A5timer%E9%98%B6%E6%AE%B5%5D%0A%20%20%20%20J%20--%3E%7C%E5%90%A6%7C%20F%0A%20%20%20%20F%20--%3E%20A%0A%0A"})]),fallback:s(()=>[n(" Loading... ")]),_:1})),C])}const x=r(B,[["render",g]]);export{q as __pageData,x as default};
